MTB_LIBS_DIR ?= ../../lib/mtb-psoc-edge-libs
MTB_MAKEFILE := $(MTB_LIBS_DIR)/Makefile

ifeq ($(CONFIG),)
CONFIG = $(shell egrep '^ *CONFIG' $(MTB_MAKEFILE) | sed 's/^.*= *//g')
$(info Using CONFIG from environment: $(CONFIG))
else
endif

MPY_MTB_MAKE_VARS = BOARD=$(BOARD) CONFIG=$(CONFIG)

MTB_LIBS_BUILD_DIR         := $(MTB_LIBS_DIR)/build
MTB_LIBS_BUILD_PRJ_HEX_DIR := $(MTB_LIBS_BUILD_DIR)/project_hex
MTB_PRJ_NS_DIR 			   := $(MTB_LIBS_DIR)/proj_cm33_ns		
MTB_PRJ_NS_BUILD_DIR       := $(MTB_LIBS_DIR)/proj_cm33_ns/build/APP_$(BOARD)/$(CONFIG)

################################################################################
# Build of the non-secure application and retrieval of the building flags
# to be used in the MicroPython build.
# This involves the processing of the build information files generated by 
# the ModusToolbox make-ninja build system.
################################################################################

MTB_BUILD_METAFILES_NAME = .defines .cflags .cxxflags .ldflags .ldlibs $(MPY_APP_NAME).ninja $(MPY_APP_NAME).elf.rsp
MTB_BUILD_METAFILES      = $(addprefix $(MTB_PRJ_NS_BUILD_DIR)/, $(MTB_BUILD_METAFILES_NAME))

# "COMBINE_SIGN_JSON=" is empty to avoid the hex combine step. 
# This step will be done by the "mtb_build_s" target.
$(MTB_BUILD_METAFILES):
	$(info )
	$(info Building $(BOARD) in $(CONFIG) mode using MTB ...)
	$(Q) $(MAKE) -C $(MTB_LIBS_DIR) $(MPY_MTB_MAKE_VARS) MTB_PROJECTS=proj_cm33_ns build APPNAME=$(MPY_APP_NAME) COMBINE_SIGN_JSON=

mtb_build_ns: $(MTB_BUILD_METAFILES)

MPY_SUFFIX = .mpy
MPY_BUILD_METAFILES_NAME = $(addsuffix $(MPY_SUFFIX), $(MTB_BUILD_METAFILES_NAME)) 
MPY_BUILD_METAFILES  = $(addprefix $(MTB_PRJ_NS_BUILD_DIR)/, $(MPY_BUILD_METAFILES_NAME))

# This script processes each of the build metafiles from the
# MTB non-secure build and generate the build files to be used in
# MicroPython build.
# These are created in the MTB_PRJ_NS_BUILD_DIR dir of the 
# non-secure MTB project with the MPY_SUFFIX suffix appended.
$(MPY_BUILD_METAFILES): $(MTB_BUILD_METAFILES)
	$(Q) $(PYTHON) $(MTB_LIBS_DIR)/build-info.py $^ --prj-dir $(MTB_PRJ_NS_DIR) --metafiles-dir $(MTB_PRJ_NS_BUILD_DIR) --suffix $(MPY_SUFFIX)

mtb_process_build_info: $(MPY_BUILD_METAFILES)

mtb_build_ns_info: mtb_process_build_info
	$(eval CFLAGS   += $(file < $(filter %cflags$(MPY_SUFFIX), $(MPY_BUILD_METAFILES))))
	$(eval CFLAGS   += $(file < $(filter %defines$(MPY_SUFFIX), $(MPY_BUILD_METAFILES))))
	$(eval CXXFLAGS += $(file < $(filter %cxxflags$(MPY_SUFFIX), $(MPY_BUILD_METAFILES))))
	$(eval CXXFLAGS += $(file < $(filter %defines$(MPY_SUFFIX), $(MPY_BUILD_METAFILES))))
	$(eval LDFLAGS  += $(file < $(filter %ldflags$(MPY_SUFFIX), $(MPY_BUILD_METAFILES))))
	$(eval LIBS     += $(file < $(filter %ldlibs$(MPY_SUFFIX), $(MPY_BUILD_METAFILES))))
	$(eval INC      += $(file < $(filter %$(MPY_APP_NAME).ninja$(MPY_SUFFIX), $(MPY_BUILD_METAFILES))))
	$(eval OBJ      += $(file < $(filter %$(MPY_APP_NAME).elf.rsp$(MPY_SUFFIX), $(MPY_BUILD_METAFILES))))

################################################################################

################################################################################
# Build of the secure application and merge with the non-secure application
# to create the combined hex file to program the device.
# This includes the signing, shifting, and merging of the secure and non-secure
################################################################################

# Copy the MicroPython hex file to the MTB build directory
# to create the combined hex file in the secure build.
$(MTB_LIBS_BUILD_PRJ_HEX_DIR)/$(MPY_APP_NAME).hex: $(BUILD)/$(MPY_APP_NAME).hex
	$(Q) $(MKDIR) -p $(MTB_LIBS_BUILD_PRJ_HEX_DIR)
	$(Q) $(CP) $^ $(MTB_LIBS_BUILD_PRJ_HEX_DIR)

mpy_build_hex_copy: $(MTB_LIBS_BUILD_PRJ_HEX_DIR)/$(MPY_APP_NAME).hex

mtb_build_s: mpy_build_hex_copy
	$(info )
	$(info Building $(BOARD) in $(CONFIG) mode using MTB ...)
	$(Q) $(MAKE) -C $(MTB_LIBS_DIR) $(MPY_MTB_MAKE_VARS) MTB_PROJECTS=proj_cm33_s build

#################################################################################

mtb_program:
	$(info )
	$(info Deploying firmware in board $(BOARD)...)
	$(Q) $(MAKE) -C $(MTB_LIBS_DIR) qprogram MTB_PROBE_SERIAL=$(DEVICE_SN) MTB_PROJECTS="proj_cm33_s proj_cm33_ns" $(MPY_MTB_MAKE_VARS) NINJA= 

mtb_clean:
	$(info )
	$(info Cleaning MTB build projects)
	-$(Q) $(MAKE) -C $(MTB_LIBS_DIR) clean MTB_PROJECTS="proj_cm33_s proj_cm33_ns" $(MPY_MTB_MAKE_VARS)
	-$(Q) rm -rf $(MTB_LIBS_DIR)/build

mtb_build_help:
	@:
	$(info )
	$(info ModusToolbox build available targets:)
	$(info )
	$(info 	mtb_build_s             Build the cm33 secure project)
	$(info 	mtb_build_ns            Build the cm33 non-secure project)
	$(info  mtb_build_ns_info       Retrieve build flags for cm33 non-secure build)
	$(info 	mtb_program             Program the built firmware to the connected board.)
	$(info 	..                      Use DEVICE_SN to specify the board serial number)
	$(info 	mtb_clean               Clean the ModusToolbox build files)
	$(info 	mtb_build_help          Show this help message)
	$(info )

.PHONY: mtb_build_ns mtb_build_s mtb_build_ns_info mtb_program mtb_clean mtb_build_help